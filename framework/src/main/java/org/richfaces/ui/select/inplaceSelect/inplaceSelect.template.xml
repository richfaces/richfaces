<?xml version="1.0" encoding="UTF-8"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright 2013, Red Hat, Inc. and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  This is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2.1 of
  the License, or (at your option) any later version.

  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this software; if not, write to the Free
  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->
<cdk:root xmlns="http://jboss.org/schema/richfaces/cdk/xhtml-el" xmlns:cdk="http://jboss.org/schema/richfaces/cdk/core"
          xmlns:c="http://jboss.org/schema/richfaces/cdk/jstl/core"
          xmlns:cc="http://jboss.org/schema/richfaces/cdk/jsf/composite"
        >

    <cc:interface>
        <cdk:class>org.richfaces.ui.select.inplaceSelect.InplaceSelectRenderer
        </cdk:class>
        <cdk:superclass>org.richfaces.ui.select.inplaceSelect.InplaceSelectRendererBase
        </cdk:superclass>
        <cdk:component-family>org.richfaces.ui.InplaceSelect
        </cdk:component-family>
        <cdk:renderer-type>org.richfaces.ui.InplaceSelectRenderer
        </cdk:renderer-type>
    </cc:interface>

    <cc:implementation>
        <cdk:object type="org.richfaces.ui.common.InplaceState" name="inplaceState" value="#{getInplaceState(component)}" />
        <cdk:object type="java.lang.String" name="inplaceValue" value="#{getSelectLabel(facesContext, component)}" />

        <cdk:object type="java.util.List" type-arguments="InplaceSelectBaseRenderer.ClientSelectItem" name="clientSelectItems"
            value="#{getConvertedSelectItems(facesContext, component)}" />
        <cdk:object type="java.lang.String" name="defaultLabel"
            value="#{inplaceValue != null and inplaceValue.length() != 0 ? inplaceValue : '&#160;&#160;&#160;'}" />

        <span id="#{clientId}" cdk:passThroughWithExclusions="id class" class="#{ getContainerStyleClasses(component) }">

            <span id="#{clientId}Label" class="rf-is-lbl#{inplaceValue == component.attributes['defaultLabel'] ? ' rf-is-dflt-lbl' : ''}">
                #{defaultLabel}
            </span>

            <c:if test="#{!component.attributes['disabled']}">
                <input id="#{clientId}Focus" type="image" name="#{clientId}Focus"
                    style="position: absolute; top: 0px; left: 0px; outline-style: none;" class="rf-is-none" />

                <span id="#{clientId}Edit" class="#{getEditStyleClass(component, inplaceState)}">
                    <input id="#{clientId}selValue" name="#{clientId}" type="hidden" value="#{getInputValue(facesContext, component)}" />
                    <input id="#{clientId}Input" name="#{clientId}Input" autocomplete="off" type="text"
                        value="#{getSelectInputLabel(facesContext, component)}" class="rf-is-fld" style="#{getInputWidthStyle(component)}"
                        readonly="readonly" cdk:passThrough="tabindex">
                        <cdk:call expression="renderInputHandlers(facesContext, component);" />
                    </input>
                    <c:if test="#{component.attributes['showControls']}">
                        <span class="rf-is-btn-prepos">
                            <span class="rf-is-btn-pos">
                                <span id="#{clientId}Btnshadow" class="rf-is-shdw">
                                    <span class="rf-is-shdw-t"></span>
                                    <span class="rf-is-shdw-l"></span>
                                    <span class="rf-is-shdw-r"></span>
                                    <span class="rf-is-shdw-b"></span>

                                    <span id="#{clientId}Btn" class="rf-is-btn-cntr">
                                        <input type="image" id="#{clientId}Okbtn" name="#{clientId}Okbtn"
                                            src="#{getResourcePath(facesContext, 'org.richfaces', 'common/inplace/ico_ok.gif')}" class="rf-is-btn"
                                            onmousedown="this.className='rf-is-btn-press'" onmouseout="this.className='rf-is-btn'"
                                            onmouseup="this.className='rf-is-btn'" />
                                        <input type="image" id="#{clientId}Cancelbtn" name="#{clientId}Cancelbtn"
                                            src="#{getResourcePath(facesContext,'org.richfaces', 'common/inplace/ico_cancel.gif')}" class="rf-is-btn"
                                            onmousedown="this.className='rf-is-btn-press'" onmouseout="this.className='rf-is-btn'"
                                            onmouseup="this.className='rf-is-btn'" />
                                    </span>
                                </span>
                            </span>
                        </span>
                    </c:if>
                    <span id="#{clientId}List" style="display: none" class="#{getListCss(component)}">
                        <cdk:call expression="renderListHandlers(facesContext, component);" />
                        <span class="rf-is-lst-pos" style="#{getListWidth(component)}">
                            <span class="rf-is-shdw">
                                <span class="rf-is-shdw-t"></span>
                                <span class="rf-is-shdw-l"></span>
                                <span class="rf-is-shdw-r"></span>
                                <span class="rf-is-shdw-b"></span>
                                <span class="rf-is-lst-dec">
                                    <span class="rf-is-lst-scrl" style="#{getListHeight(component)}">
                                        <span id="#{clientId}Items">
                                            <cdk:call expression="encodeItems(facesContext, component, clientSelectItems);" />
                                        </span>
                                    </span>
                                </span>
                            </span>
                        </span>
                    </span>
                </span>
                <script type="text/javascript">
                    <cdk:scriptObject name="options">
                        <cdk:scriptOption name="clientSelectItems" value="#{clientSelectItems}" />
                        <cdk:scriptOption name="noneCss"
                            value="#{concatClasses('rf-is-none', component.attributes['noneStateClass'])}" />
                        <cdk:scriptOption name="changedCss"
                            value="#{concatClasses('rf-is-chng', component.attributes['changedClass'])}" />
                        <cdk:scriptOption name="editCss"
                            value="#{concatClasses('rf-is-act', component.attributes['activeClass'])}" />
                        <cdk:scriptOption name="selectItemCss"
                            value="#{concatClasses('rf-is-sel', component.attributes['selectItemClass'])}" />
                        <cdk:scriptOption name="editEvent" value="#{getEditEvent(component)}" />
                        <cdk:scriptOption name="defaultLabel" value="#{defaultLabel}" />
                        <cdk:scriptOption attributes="state saveOnBlur showControls openOnEdit saveOnSelect inputWidth" />
                        <cdk:scriptOption attributes="onbegin oncomplete onerror onbeforedomupdate onselectitem onchange onblur onfocus"
                            wrapper="eventHandler" />
                    </cdk:scriptObject>
                    new RichFaces.ui.InplaceSelect("#{clientId}", #{toScriptArgs(options)});
                </script>
            </c:if>
        </span>
    </cc:implementation>
</cdk:root>