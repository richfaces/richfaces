<?xml version="1.0" encoding="UTF-8"?>

<!--
  JBoss, Home of Professional Open Source
  Copyright 2013, Red Hat, Inc. and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  This is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2.1 of
  the License, or (at your option) any later version.

  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this software; if not, write to the Free
  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<cdk:root xmlns="http://jboss.org/schema/richfaces/cdk/xhtml-el"
          xmlns:cdk="http://jboss.org/schema/richfaces/cdk/core"
          xmlns:c="http://jboss.org/schema/richfaces/cdk/jstl/core"
          xmlns:cc="http://jboss.org/schema/richfaces/cdk/jsf/composite"
        >

    <cc:interface>
        <cdk:class>org.richfaces.ui.select.pickList.PickListRenderer</cdk:class>
        <cdk:superclass>org.richfaces.ui.select.pickList.PickListRendererBase</cdk:superclass>
        <cdk:component-family>org.richfaces.SelectMany</cdk:component-family>
        <cdk:renderer-type>org.richfaces.select.PickListRenderer</cdk:renderer-type>
        <cdk:component-base-class>org.richfaces.ui.select.pickList.AbstractPickList</cdk:component-base-class>
        <cdk:renders-children>true</cdk:renders-children>

        <cdk:resource-dependency library="bootstrap" name="bootstrap.css" />
        <cdk:resource-dependency library="font-awesome" name="font-awesome.css" />
        <cdk:resource-dependency library="io.richwidgets" name="select/select-list.css" />
        <cdk:resource-dependency library="io.richwidgets" name="select/ordering-list.css" />
        <cdk:resource-dependency library="io.richwidgets" name="select/pick-list.css" />

        <cdk:resource-dependency library="org.richfaces" name="ajax.reslib" />
        <cdk:resource-dependency library="com.jqueryui" name="jquery.ui.core.js" />
        <cdk:resource-dependency library="com.jqueryui" name="jquery.ui.widget.js" />
        <cdk:resource-dependency library="com.jqueryui" name="jquery.ui.position.js" />
        <cdk:resource-dependency library="com.jqueryui" name="jquery.ui.mouse.js" />
        <cdk:resource-dependency library="com.jqueryui" name="jquery.ui.button.js" />
        <cdk:resource-dependency library="com.jqueryui" name="jquery.ui.selectable.js" />
        <cdk:resource-dependency library="com.jqueryui" name="jquery.ui.sortable.js" />
        <cdk:resource-dependency library="io.richwidgets" name="select/ordering-list.js" />
        <cdk:resource-dependency library="io.richwidgets" name="select/pick-list.js" />
        <cdk:resource-dependency library="org.richfaces" name="bridge/bridge-base.js" />
        <cdk:resource-dependency library="org.richfaces" name="bridge/select/pick-list-bridge.js" />
    </cc:interface>

    <cc:implementation>

        <cdk:object type="java.util.List" name="clientSelectItems" value="#{getClientSelectItems(facesContext, component)}" />
        <cdk:object type="java.util.Iterator" name="sourceSelectItems" value="#{getSourceSelectItems(clientSelectItems)}" />
        <cdk:object type="java.util.Iterator" name="targetSelectItems" value="#{getTargetSelectItems(clientSelectItems)}" />

        <div id="#{clientId}" cdk:passThrough="onclick ondblclick onkey* onmouse* style styleClass">
            <c:choose>
                <c:when test="#{! hasColumnChildren(facesContext, component)}">
                    <ol id="#{clientId}SourceList" class="source">
                        <c:forEach var="itemObject" items="#{sourceSelectItems}">
                            <cdk:object name="item" type="org.richfaces.ui.select.ClientSelectItem" value="#{itemObject}" />
                            <li data-key="#{item.convertedValue}">#{item.label}</li>
                        </c:forEach>
                    </ol>
                    <ol id="#{clientId}TargetList" class="target">
                        <c:forEach var="itemObject" items="#{targetSelectItems}">
                            <cdk:object name="item" type="org.richfaces.ui.select.ClientSelectItem" value="#{itemObject}" />
                            <li data-key="#{item.convertedValue}">#{item.label}</li>
                        </c:forEach>
                    </ol>
                </c:when>
                <c:otherwise>
                    <cdk:object name="columns" type="java.util.Iterator" value="#{component.columns()}" />
                    <table id="#{clientId}SourceList" class="source">
                        <c:if test="#{columns != null and columns.hasNext()}">
                            <c:if test="#{isHeaderExists(facesContext, component)}">
                                <cdk:renderFragment name="renderColumnHeaders" columns="#{columns}" />
                            </c:if>
                            <cdk:renderFragment name="renderColumns" columns="#{columns}" clientSelectItems="#{sourceSelectItems}" />
                        </c:if>
                    </table>
                    <cdk:call expression="columns = component.columns()" />
                    <table id="#{clientId}TargetList" class="target">
                        <c:if test="#{columns != null and columns.hasNext()}">
                            <c:if test="#{isHeaderExists(facesContext, component)}">
                                <cdk:renderFragment name="renderColumnHeaders" columns="#{columns}" />
                            </c:if>
                            <cdk:renderFragment name="renderColumns" columns="#{columns}" clientSelectItems="#{targetSelectItems}" />
                        </c:if>
                    </table>
                </c:otherwise>
            </c:choose>

            <script>
                <cdk:scriptObject name="options">
                    <cdk:scriptOption attributes="disabled columnClasses orderable
                        pickButtonsText orderButtonsText
                        switchByClick switchByDblClick
                        header:caption sourceHeader:sourceCaption targetHeader:targetCaption
                        height:listHeight heightMin:minListHeight heightMax:maxListHeight" />
                    <cdk:scriptOption wrapper="eventHandler" attributes="change:onchange focus:onfocus blur:onblur onadditems onremoveitems" />
                </cdk:scriptObject>
                RichFaces.jQuery(document.getElementById('#{clientId}')).pickListBridge(#{toScriptArgs(options)});
            </script>
        </div>

    </cc:implementation>

    <cdk:fragment name="renderColumnHeaders">
        <cc:interface>
            <cc:attribute name="columns" type="java.util.Iterator" />
        </cc:interface>
        <cc:implementation>
            <thead>
                <tr>
                    <c:forEach var="columnObject" items="#{columns}">
                        <cdk:object name="column" type="javax.faces.component.UIColumn" value="#{columnObject}" />
                        <th>
                            <c:if test='#{hasFacet(column, "header")}'>
                                <cdk:object name="header" type="javax.faces.component.UIComponent" value="#{column.header}" />
                                <c:if test='#{header.rendered}'>
                                    <cdk:call expression="header.encodeBegin(facesContext)" />
                                    <cdk:call expression="renderChildren(facesContext, header)" />
                                    <cdk:call expression="header.encodeEnd(facesContext)" />
                                </c:if>
                            </c:if>
                        </th>
                    </c:forEach>
                </tr>
            </thead>
        </cc:implementation>
    </cdk:fragment>

    <cdk:fragment name="renderColumns">
        <cc:interface>
            <cc:attribute name="columns" type="java.util.Iterator" />
            <cc:attribute name="clientSelectItems" type="java.util.Iterator" />
        </cc:interface>
        <cc:implementation>
            <tbody>
                <cdk:object name="requestMap" type="java.util.Map" value="#{facesContext.getExternalContext().getRequestMap()}" />
                <cdk:object name="oldVar" type="java.lang.Object" value="#{requestMap.get(component.getVar())}" />
                <c:forEach var="itemObject" items="#{clientSelectItems}">
                    <!-- TODO: Add support for type-arguments to the cc:attribute tag -->
                    <cdk:object name="item" type="org.richfaces.ui.select.ClientSelectItem" value="#{itemObject}" />
                    <!-- TODO: Find an elegant way of resetting the iterator -->
                    <cdk:call expression="columns = component.columns()" />
                    <cdk:call expression="requestMap.put(component.getVar(), item.getSelectItem().getValue())"/>
                    <tr data-key="#{item.convertedValue}">
                        <c:forEach var="columnObject" items="#{columns}" varStatus="varStatus">
                            <cdk:object name="column" type="javax.faces.component.UIColumn" value="#{columnObject}" />
                            <td>
                                <cdk:call expression="column.encodeBegin(facesContext)" />
                                <cdk:call expression="renderChildren(facesContext, column)" />
                                <cdk:call expression="column.encodeEnd(facesContext)" />
                            </td>
                        </c:forEach>
                    </tr>
                </c:forEach>
                <cdk:call expression="requestMap.put(component.getVar(), oldVar)" />
                <cdk:call expression="oldVar = null" />
            </tbody>
        </cc:implementation>
    </cdk:fragment>

</cdk:root>
