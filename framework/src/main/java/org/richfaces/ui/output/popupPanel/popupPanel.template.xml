<?xml version="1.0" encoding="UTF-8"?>

<!--
  JBoss, Home of Professional Open Source
  Copyright 2013, Red Hat, Inc. and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  This is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2.1 of
  the License, or (at your option) any later version.

  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this software; if not, write to the Free
  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<cdk:root xmlns="http://jboss.org/schema/richfaces/cdk/xhtml-el" xmlns:cdk="http://jboss.org/schema/richfaces/cdk/core"
          xmlns:c="http://jboss.org/schema/richfaces/cdk/jstl/core"
          xmlns:cc="http://jboss.org/schema/richfaces/cdk/jsf/composite"
        >

    <cc:interface>
        <cdk:class>org.richfaces.ui.output.popupPanel.PopupPanelRenderer</cdk:class>
        <cdk:superclass>org.richfaces.ui.output.popupPanel.PopupPanelBaseRenderer</cdk:superclass>
        <cdk:component-family>org.richfaces.ui.PopupPanel</cdk:component-family>
        <cdk:renderer-type>org.richfaces.ui.PopupPanelRenderer</cdk:renderer-type>
    </cc:interface>

    <cc:implementation>
        <cdk:object name="zindex" value="#{component.attributes['zindex']}" />

        <cdk:call expression="checkOptions(facesContext, component)" />
        <div id="#{clientId}" style="visibility: hidden;">
            <c:if test="#{component.attributes['modal']}">
                <div id="#{clientId}_shade" onclick="#{component.attributes['onmaskclick']}" ondblclick="#{component.attributes['onmaskdblclick']}"
                    oncontextmenu="#{component.attributes['onmaskcontextmenu']}" onmouseup="#{component.attributes['onmaskmouseup']}"
                    onmousedown="#{component.attributes['onmaskmousedown']}" onmousemove="#{component.attributes['onmaskmousemove']}"
                    onmouseover="#{component.attributes['onmaskmouseover']}" onmouseout="#{component.attributes['onmaskmouseout']}"
                    class="rf-pp-shade" style="z-index:#{zindex};">
                    <button class="rf-pp-btn" name="#{clientId}firstHref" id="#{clientId}FirstHref"></button>
                </div>

            </c:if>

            <div id="#{clientId}_container" style="#{getContainerStyle(component)}" cdk:passThroughWithExclusions="id style class styleClass"
                class="rf-pp-cntr #{component.attributes['styleClass']}">

                <div id="#{clientId}_shadow" class="rf-pp-shdw" />

                <c:if test="#{component.getFacet('header')!=null and component.getFacet('header').rendered}">
                    <div id="#{clientId}_header" class="rf-pp-hdr #{component.attributes['headerClass']}">
                        <div id="#{clientId}_header_content" class="rf-pp-hdr-cnt">
                            <cdk:call expression="renderHeaderFacet(facesContext, component)" />
                        </div>
                    </div>
                </c:if>
                <c:if
                    test="#{component.attributes['header'] != null and (component.getFacet('header')==null or !component.getFacet('header').rendered)}">
                    <div id="#{clientId}_header" class="rf-pp-hdr #{component.attributes['headerClass']}">
                        <div id="#{clientId}_header_content" class="rf-pp-hdr-cnt">
                            #{component.attributes['header']}
                        </div>
                    </div>
                </c:if>
                <c:if test="#{component.getFacet('controls')!=null and component.getFacet('controls').rendered}">
                    <div id="#{clientId}_header_controls" class="rf-pp-hdr-cntrls #{component.attributes['controlsClass']}">
                        <cdk:call expression="renderControlsFacet(facesContext, component)" />
                    </div>
                </c:if>

                <div id="#{clientId}_content_scroller" style="#{getStyleIfTrimmed(component)}" class="rf-pp-cnt-scrlr">
                    <div id="#{clientId}_content" class="rf-pp-cnt" style="#{component.attributes['style']}">
                        <cdk:call expression="renderChildren(facesContext, component)" />
                    </div>
                </div>
                <c:if test="#{component.attributes['resizeable']}">
                    <div id="#{clientId}ResizerW" class="rf-pp-hndlr  rf-pp-hndlr-l"></div>
                    <div id="#{clientId}ResizerE" class="rf-pp-hndlr rf-pp-hndlr-r"></div>
                    <div id="#{clientId}ResizerN" class="rf-pp-hndlr rf-pp-hndlr-t"></div>

                    <div id="#{clientId}ResizerS" class="rf-pp-hndlr rf-pp-hndlr-b"></div>
                    <div id="#{clientId}ResizerNW" class="rf-pp-hndlr rf-pp-hndlr-tl"></div>
                    <div id="#{clientId}ResizerNE" class="rf-pp-hndlr rf-pp-hndlr-tr"></div>
                    <div id="#{clientId}ResizerSW" class="rf-pp-hndlr rf-pp-hndlr-bl"></div>
                    <div id="#{clientId}ResizerSE" class="rf-pp-hndlr rf-pp-hndlr-br"></div>
                </c:if>

            </div>
            <cdk:scriptObject name="options">
                <cdk:scriptOption name="left" value="#{getLeftOrDefault(component)}" defaultValue='"auto"' />
                <cdk:scriptOption name="top" value="#{getTopOrDefault(component)}" defaultValue='"auto"' />
                <cdk:scriptOption
                    attributes="width height minWidth minHeight maxWidth maxHeight moveable followByScroll left top zindex shadowDepth shadowOpacity domElementAttachment show keepVisualState autosized resizeable modal overlapEmbedObjects visualOptions " />
                <cdk:scriptOption attributes="onshow onhide onresize onmove onbeforeshow onbeforehide" wrapper="eventHandler" />
            </cdk:scriptObject>

            <script type="text/javascript">
                new RichFaces.ui.PopupPanel(#{toScriptArgs(clientId, options)});
                <c:if test="#{component.attributes['show'] != false}">
                    RichFaces.ui.PopupPanel.showPopupPanel(#{toScriptArgs(clientId,
                    getHandledVisualOptions(component))});
                </c:if>
            </script>
        </div>
    </cc:implementation>
</cdk:root>