<?xml version="1.0" encoding="UTF-8"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright 2013, Red Hat, Inc. and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  This is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2.1 of
  the License, or (at your option) any later version.

  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this software; if not, write to the Free
  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->
<cdk:root xmlns="http://jboss.org/schema/richfaces/cdk/xhtml-el" xmlns:cdk="http://jboss.org/schema/richfaces/cdk/core"
          xmlns:cc="http://jboss.org/schema/richfaces/cdk/jsf/composite"
        >
    <cc:interface>
        <cdk:class>org.richfaces.ui.input.inputNumberSpinner.InputNumberSpinnerRenderer</cdk:class>
        <cdk:superclass>org.richfaces.ui.input.InputRendererBase</cdk:superclass>
        <cdk:component-family>javax.faces.Input</cdk:component-family>
        <cdk:renderer-type>org.richfaces.ui.InputNumberSpinnerRenderer</cdk:renderer-type>
        <cdk:resource-dependency library="org.richfaces" name="base-component.reslib" />
        <cdk:resource-dependency name="jquery.position.js" />
        <cdk:resource-dependency library="jquery.plugins" name="jquery.mousewheel.js" />
        <cdk:resource-dependency library = "org.richfaces" name = "input/inputNumberSpinner/inputNumberSpinner.js" />
        <cdk:resource-dependency library = "org.richfaces" name = "input/inputNumberSpinner/inputNumberSpinner.ecss" />
    </cc:interface>
    <cc:implementation>
        <span id="#{clientId}" class="rf-insp #{component.attributes['styleClass']}" cdk:passThroughWithExclusions="id class">
            <cdk:object name="inputSize" type="Integer" cast="true" value="#{component.attributes['inputSize']}" />
            <input name="#{clientId}" type="text" class="rf-insp-inp #{component.attributes['inputClass']}" value="#{getInputValue(facesContext, component)}"
                cdk:passThrough="accesskey disabled maxlength onblur onfocus onclick:oninputclick ondblclick:oninputdblclick onkeydown:oninputkeydown
				onkeypress:oninputkeypress onkeyup:oninputkeyup onmousedown:oninputmousedown onmousemove:oninputmousemove onmouseout:oninputmouseout
				onmouseover:oninputmouseover onmouseup:oninputmouseup onselect tabindex"
                readonly="#{!component.attributes['enableManualInput']}" autocomplete="#{component.attributes['disableBrowserAutoComplete'] ? 'off' : ''}"
                size="#{inputSize > 0 ? inputSize : null}" />
            <span class="rf-insp-btns">
                <span class="rf-insp-inc#{component.attributes['disabled'] ? '-dis' : ''}" cdk:passThrough="onclick:onupclick" />
                <span class="rf-insp-dec#{component.attributes['disabled'] ? '-dis' : ''}" cdk:passThrough="onclick:ondownclick" />
            </span>
            <!-- TODO Rewrite the next line when the CDK will support normal way to take event handlers from attributes and behaviors. -->
            <cdk:object name="onchange" type="String"
                value="#{convertToString(RenderKitUtils.getAttributeAndBehaviorsValue(facesContext, component, RenderKitUtils.attributes().generic('onchange', 'onchange', 'change', 'valueChange').first()))}" />
            <script type="text/javascript">new RichFaces.ui.InputNumberSpinner('#{clientId}', {
                cycled: #{component.attributes['cycled']},
                maxValue: #{component.attributes['maxValue']},
                minValue: #{component.attributes['minValue']},
                onchange:
                #{onchange.length() > 0 ? 'function (event) {' + onchange + '}' : 'null' },
                step: #{component.attributes['step']}
                });
            </script>
        </span>
    </cc:implementation>
</cdk:root>
