<?xml version="1.0" encoding="UTF-8"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright 2013, Red Hat, Inc. and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  This is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2.1 of
  the License, or (at your option) any later version.

  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this software; if not, write to the Free
  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->
<cdk:root xmlns="http://jboss.org/schema/richfaces/cdk/xhtml-el" xmlns:cdk="http://jboss.org/schema/richfaces/cdk/core"
          xmlns:cc="http://jboss.org/schema/richfaces/cdk/jsf/composite"
          xmlns:c="http://jboss.org/schema/richfaces/cdk/jstl/core"
        >
    <cc:interface>
        <cdk:class>org.richfaces.ui.input.calendar.CalendarRenderer</cdk:class>
        <cdk:superclass>org.richfaces.ui.input.calendar.CalendarRendererBase
        </cdk:superclass>
        <cdk:renderer-type>org.richfaces.ui.CalendarRenderer</cdk:renderer-type>
        <cdk:import package="org.richfaces.ui.common" names="Positioning" />
    </cc:interface>
    <cc:implementation>
        <div id="#{clientId}" class="#{concatClasses('rf-cal', component.attributes['styleClass'])}" style="#{component.attributes['style']}">
            <span id="#{clientId}Popup" style="#{component.attributes['popup'] ? 'white-space: nowrap;' : 'display: none;'}">
                <c:choose>
                    <c:when test="#{!component.attributes['popup']}">
                        <input id="#{clientId}InputDate" autocomplete="off" style="display:none" name="#{clientId}InputDate"
                            value="#{this:getInputValue(facesContext,component)}" type="hidden" />
                    </c:when>
                    <c:otherwise>
                        <input id="#{clientId}InputDate" name="#{clientId}InputDate" value="#{this:getInputValue(facesContext,component)}"
                            type="#{component.attributes['showInput'] ? 'text' : 'hidden'}" disabled="#{component.attributes['disabled']}"
                            accesskey="#{component.attributes['accesskey']}" maxlength="#{component.attributes['maxlength']}"
                            size="#{component.attributes['inputSize']}" style="vertical-align: middle; #{component.attributes['inputStyle']}"
                            class="rf-cal-inp #{component.attributes['inputClass']}" tabindex="#{component.attributes['tabindex']}"
                            readonly="#{(!component.attributes['enableManualInput'] || component.attributes['readonly']) ? 'readonly' : ''}">
                            <cdk:call expression="renderInputHandlers(facesContext, component);" />
                        </input>
                        <c:choose>
                            <c:when test="#{isUseIcons(facesContext, component)}">
                                <img id="#{clientId}PopupButton" alt="" class="rf-cal-btn #{component.attributes['buttonClass']}"
                                    accesskey="#{component.attributes['accesskey']}" style="vertical-align: middle" tabindex="#{component.attributes['tabindex']}"
                                    src="#{getButtonIcon(facesContext, component)}" />
                            </c:when>
                            <c:otherwise>
                                <button type="button" id="#{clientId}PopupButton" name="#{clientId}PopupButton" style="vertical-align: middle"
                                    class="rf-cal-btn #{component.attributes['buttonClass']}" tabindex="#{component.attributes['tabindex']}"
                                    disabled="#{component.attributes['disabled']}">
                                    #{component.attributes['buttonLabel']}
                                </button>
                            </c:otherwise>
                        </c:choose>
                    </c:otherwise>
                </c:choose>
                <input type="hidden" id="#{clientId}InputCurrentDate" style="display:none" autocomplete="off"
                    name="#{clientId}InputCurrentDate" value="#{getCurrentDateAsString(facesContext, component)}" />
            </span>
            <span style="display: none;" id="#{clientId}Content"></span>
            <span style="display: none;" id="#{clientId}Script">
                <script type="text/javascript">

                    <cdk:scriptObject name="options">
                        <cdk:scriptOption
                            attributes="enableManualInput disabled readonly resetTimeOnDateSelect showApplyButton popup showInput showHeader showFooter showWeeksBar datePattern hidePopupOnScrol showWeekDaysBar defaultLabel" />
                        <cdk:scriptOption
                            attributes="onchange ondateselect oncurrentdateselect onbeforedateselect onbeforecurrentdateselect onhide onshow ondatemouseover ondatemouseout onclean ontimeselect onbeforetimeselect"
                            wrapper="eventHandler" />
                        <cdk:scriptOption name="mode" value="#{getModeOrDefault(component)}"
                            defaultValue="org.richfaces.ui.input.calendar.AbstractCalendar.Mode.client" />
                        <cdk:scriptOption name="todayControlMode" value="#{getTodayControlModeOrDefault(component)}"
                            defaultValue='"select"' />
                        <cdk:scriptOption name="direction" value="#{getDirection(component)}" defaultValue="Positioning.DEFAULT.getValue()" />
                        <cdk:scriptOption name="jointPoint" value="#{getJointPoint(component)}" defaultValue="Positioning.DEFAULT.getValue()" />
                        <cdk:scriptOption name="horizontalOffset" value="#{component.attributes['horizontalOffset']}"
                            defaultValue="0" />
                        <cdk:scriptOption name="verticalOffset" value="#{component.attributes['verticalOffset']}"
                            defaultValue="0" />
                        <cdk:scriptOption name="boundaryDatesMode" value="#{getBoundaryDatesModeOrDefault(component)}"
                            defaultValue='"inactive"' />
                        <cdk:scriptOption name="currentDate" value="#{getCurrentDate(facesContext, component)}" />
                        <cdk:scriptOption name="selectedDate" value="#{getSelectedDate(facesContext, component)}" />
                        <cdk:scriptOption name="dayCellClass" value="#{getDayCellClass(facesContext, component)}" />
                        <cdk:scriptOption name="dayStyleClass" value="#{getDayStyleClass(facesContext, component)}" />
                        <cdk:scriptOption name="isDayEnabled" value="#{getDayEnabled(facesContext, component)}" />
                        <cdk:scriptOption name="labels" value="#{getLabels(facesContext, component)}" />
                        <cdk:scriptOption name="defaultTime" value="#{getPreparedDefaultTime(facesContext, component)}" />
                        <cdk:scriptOption name="style" value="#{getPopupStyle(facesContext, component)}" />
                        <cdk:scriptOption name="styleClass" value="#{component.attributes['popupClass']}" />
                    </cdk:scriptObject>

                    RichFaces.ui.Calendar.addLocale("#{getAsLocale(facesContext, component).toString()}",
                    #{toScriptArgs(getLocaleOptions(facesContext, component))});
                    new RichFaces.ui.Calendar("#{clientId}",
                    "#{getAsLocale(facesContext, component).toString()}",
                    #{toScriptArgs(options)}).load(#{writePreloadBody(facesContext, component)});

                </script>
            </span>
        </div>
    </cc:implementation>
</cdk:root>
