<?xml version="1.0" encoding="UTF-8"?>

<cdk:root xmlns="http://jboss.org/schema/richfaces/cdk/xhtml-el"
          xmlns:cdk="http://jboss.org/schema/richfaces/cdk/core"
          xmlns:c="http://jboss.org/schema/richfaces/cdk/jstl/core"
          xmlns:cc="http://jboss.org/schema/richfaces/cdk/jsf/composite">

    <cc:interface>
        <cdk:superclass>org.richfaces.ui.input.autocomplete.AutocompleteRendererBase</cdk:superclass>
        <cdk:component-family>org.richfaces.ui.AutocompleteFamily</cdk:component-family>
        <cdk:renderer-type>org.richfaces.ui.AutocompleteRenderer</cdk:renderer-type>
        <cdk:component-base-class>org.richfaces.ui.input.autocomplete.AbstractAutocomplete</cdk:component-base-class>

        <cdk:resource-dependency library="bootstrap" name="bootstrap.css" />
        <cdk:resource-dependency library="font-awesome" name="font-awesome.css" />
        <cdk:resource-dependency library="org.richfaces" name="widget/input/autocomplete.css" />
        
        <cdk:resource-dependency library="org.richfaces" name="ajax.reslib" />
        <cdk:resource-dependency library="com.jqueryui" name="jquery.ui.core.js" />
        <cdk:resource-dependency library="com.jqueryui" name="jquery.ui.widget.js" />
        <cdk:resource-dependency library="com.jqueryui" name="jquery.ui.position.js" />
        <cdk:resource-dependency library="com.jqueryui" name="jquery.ui.menu.js" />
        <cdk:resource-dependency library="com.jqueryui" name="jquery.ui.autocomplete.js" />
        <cdk:resource-dependency library="org.richfaces" name="widget/input/autocomplete.js" />
        <cdk:resource-dependency library="org.richfaces" name="bridge/bridgeBase.js" />
        <cdk:resource-dependency library="org.richfaces" name="bridge/input/autocompleteBridge.js" />
    </cc:interface>

    <cc:implementation>
        <div id="#{clientId}">
            <input id="#{clientId}Input" name="#{clientId}Input" type="text"
                   value="#{getInputValue(facesContext, component)}"
                   cdk:passThroughWithExclusions=""
                   disabled="#{component.disabled}" />
            <cdk:renderFragment name="renderSuggestions" />
            <script>
                <cdk:scriptObject name="options">
                    <cdk:scriptOption attributes="tokens mode showButton layout minChars selectFirst" />
                    <cdk:scriptOption wrapper="eventHandler" attributes="" />
                    <cdk:scriptOption name="filter" value="#{this.getClientFilterFunction(component)}" />
                </cdk:scriptObject>
                $(document.getElementById('#{clientId}')).richAutocompleteBridge(#{toScriptArgs(options)});
            </script>
        </div>
    </cc:implementation>
    
    <cdk:fragment name="renderSuggestionsAsList">
        <cc:interface>
            <cc:attribute name="items" type="java.lang.Iterable" />
        </cc:interface>
        <cc:implementation>
            <ul id="#{clientId}Suggestions" style="display: none">
                <cdk:call expression="Object savedVar = saveVar(facesContext, component.getVar())" />
                <c:forEach var="item" items="#{items}">
                    <cdk:call expression="setVar(facesContext, component.getVar(), item)" />
                    <li data-label="#{component.fetchValue}">
                        <c:choose>
                            <c:when test="#{empty component.children}">
                                #{item}
                            </c:when>
                            <c:otherwise>
                                <c:forEach var="c" items="#{component.children}">
                                    <cdk:call expression="c.encodeAll(facesContext)" />
                                </c:forEach>
                            </c:otherwise>
                        </c:choose>
                    </li>
                </c:forEach>
                <cdk:call expression="setVar(facesContext, component.getVar(), savedVar)" />
            </ul>
        </cc:implementation>
    </cdk:fragment>
    
    <cdk:fragment name="renderSuggestionsAsTable">
        <cc:interface>
            <cc:attribute name="items" type="java.lang.Iterable" />
        </cc:interface>
        <cc:implementation>
            <table id="#{clientId}Suggestions" style="display: none">
                <tbody>
                    <cdk:call expression="Object savedVar = saveVar(facesContext, component.getVar())" />
                    <c:forEach var="item" items="#{items}">
                        <cdk:call expression="setVar(facesContext, component.getVar(), item)" />
                        <tr data-label="#{component.fetchValue}">
                            <c:forEach var="column" items="#{component.children}">
                                <td><cdk:call expression="column.encodeAll(facesContext)" /></td>
                            </c:forEach>
                        </tr>
                    </c:forEach>
                    <cdk:call expression="setVar(facesContext, component.getVar(), savedVar)" />
                </tbody>
            </table>
        </cc:implementation>
    </cdk:fragment>
    
    <cdk:fragment name="renderSuggestions">
        <cc:implementation>
            <c:choose>
                <c:when test="#{component.layout == 'list'}">
                    <cdk:renderFragment name="renderSuggestionsAsList" items="#{getSuggestionsAsDataModel(facesContext, component)}" />
                </c:when>
                <c:when test="#{component.layout == 'table'}">
                    <cdk:renderFragment name="renderSuggestionsAsTable" items="#{getSuggestionsAsDataModel(facesContext, component)}" />
                </c:when>
            </c:choose>
        </cc:implementation>
    </cdk:fragment>

</cdk:root>