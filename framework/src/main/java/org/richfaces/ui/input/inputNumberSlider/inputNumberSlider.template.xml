<?xml version="1.0" encoding="UTF-8"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright 2013, Red Hat, Inc. and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  This is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2.1 of
  the License, or (at your option) any later version.

  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this software; if not, write to the Free
  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->
<cdk:root xmlns="http://jboss.org/schema/richfaces/cdk/xhtml-el" xmlns:cdk="http://jboss.org/schema/richfaces/cdk/core"
    xmlns:cc="http://jboss.org/schema/richfaces/cdk/jsf/composite" xmlns:c="http://jboss.org/schema/richfaces/cdk/jstl/core"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <cc:interface>
        <cdk:class>org.richfaces.ui.input.inputNumberSlider.InputNumberSliderRenderer</cdk:class>
        <cdk:superclass>org.richfaces.ui.input.inputNumberSlider.InputNumberSliderRendererBase</cdk:superclass>
        <cdk:component-family>javax.faces.Input</cdk:component-family>
        <cdk:renderer-type>org.richfaces.ui.InputNumberSliderRenderer</cdk:renderer-type>
        <cdk:resource-dependency library="org.richfaces" name="base-component.reslib" />
        <cdk:resource-dependency name="jquery.position.js" />
        <cdk:resource-dependency library="jquery.plugins" name="jquery.mousewheel.js" />
        <cdk:resource-dependency library = "org.richfaces" name = "input/inputNumberSlider/inputNumberSlider.js" />
        <cdk:resource-dependency library = "org.richfaces" name = "input/inputNumberSlider/inputNumberSlider.ecss" />
    </cc:interface>
    <cc:implementation>
        <span id="#{clientId}" class="rf-insl#{isBarStyleHandle(component)?' rf-insl-bar':''} #{component.attributes['styleClass']}" cdk:passThroughWithExclusions="id class">
            <cdk:object name="maxlength" type="Integer" cast="true" value="#{component.attributes['maxlength']}" />
            <cdk:object name="inputSize" type="Integer" cast="true" value="#{component.attributes['inputSize']}" />
            <c:if test="#{isInputPosition(component, 'left') || isInputPosition(component, 'top')}">
                <xi:include xpointer="xpointer(/*)" href="input.template.inc" />
                <c:if test="#{isInputPosition(component, 'top') and component.attributes['showInput']}">
                    <br />
                </c:if>
            </c:if>
            <c:if test="#{component.attributes['showArrows']}">
                <span class="rf-insl-dec#{component.attributes['disabled'] ? '-dis' : ''} #{component.attributes['decreaseClass']}" />
            </c:if>
            <span class="rf-insl-trc-cntr">
                <c:if test="#{component.attributes['showBoundaryValues']}">
                    <span class="rf-insl-mn">#{component.attributes['minValue']}</span>
                    <span class="rf-insl-mx">#{component.attributes['maxValue']}</span>
                </c:if>
                <span class="rf-insl-trc #{component.attributes['trackClass']}">
                    <span class="rf-insl-hnd-cntr">
                        <span
                            class="rf-insl-hnd#{component.attributes['disabled'] ? '-dis' : ''} #{component.attributes['handleClass']}" />
                    </span>
                </span>
            </span>
            <c:if test="#{component.attributes['showArrows']}">
                <span class="rf-insl-inc#{component.attributes['disabled'] ? '-dis' : ''} #{component.attributes['increaseClass']}" />
            </c:if>
            <c:if test="#{isInputPosition(component, 'right') || isInputPosition(component, 'bottom')}">
                <c:if test="#{isInputPosition(component, 'bottom') and component.attributes['showInput']}">
                    <br />
                </c:if>
                <xi:include xpointer="xpointer(/*)" href="input.template.inc" />
            </c:if>
            <c:if test="#{component.attributes['showTooltip']}">
                <span class="rf-insl-tt #{component.attributes['tooltipClass']}">#{getInputValue(facesContext, component)}
                </span>
            </c:if>
            <!-- TODO Rewrite the next line when the CDK will support normal way to take event handlers from attributes and behaviors. -->
            <cdk:object name="onchange" type="String"
                value="#{convertToString(RenderKitUtils.getAttributeAndBehaviorsValue(facesContext, component, RenderKitUtils.attributes().generic('onchange', 'onchange', 'change', 'valueChange').first()))}" />
            <script type="text/javascript">new RichFaces.ui.InputNumberSlider('#{clientId}', {
                delay: #{component.attributes['delay']},
                disabled: #{component.attributes['disabled']},
                handleType: '#{component.attributes['handleType']}',
                maxValue: #{component.attributes['maxValue']},
                minValue:
                #{component.attributes['minValue']},
                onchange: #{onchange.length() > 0 ? 'function (event) {' + onchange + '}' :
                'null' },
                step: #{component.attributes['step']},
                tabIndex:
                #{RenderKitUtils.shouldRenderAttribute(component.attributes['tabindex']) ? component.attributes['tabindex'] :
                'null'}
                }, {
                decreaseSelectedClass: '#{component.attributes['decreaseSelectedClass']}',
                handleSelectedClass:
                '#{component.attributes['handleSelectedClass']}',
                increaseSelectedClass:
                '#{component.attributes['increaseSelectedClass']}'
                });
            </script>
        </span>
    </cc:implementation>
</cdk:root>
