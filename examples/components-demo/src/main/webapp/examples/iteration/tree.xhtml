<!--
  JBoss, Home of Professional Open Source
  Copyright 2013, Red Hat, Inc. and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  This is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2.1 of
  the License, or (at your option) any later version.

  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this software; if not, write to the Free
  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<ui:composition template="/layout/template.xhtml"
                xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:c="http://java.sun.com/jsp/jstl/core"
                xmlns:rich="http://richfaces.org/rich"
                xmlns:a4j="http://richfaces.org/a4j">
    <ui:param name="title" value="Tree" />
    
    <!-- content -->
    <ui:define name="content">
    


    <h:outputStylesheet>/*<![CDATA[*/
	.customClass .customNodeClass {
		border: 1px solid navy;
	}

	.customClass .customHandleClass {
		border: 1px solid red;
	}

	.customClass .customIconClass {
		border: 1px solid yellow;
	}

	.customClass .customLabelClass {
		border: 1px solid green;
	}

	.loadingWithoutFacet .rf-trn-ldn .rf-trn-hnd {
		cursor: default;
		background-image: url(#{facesContext.externalContext.requestContextPath}/images/loading.gif);
	}

	/*]]>*/
    </h:outputStylesheet>
    
    <h:outputScript>
        function nodesArrayToString(nodes) {
        var result = new Array();
        jQuery.each(nodes, function(k, v) {
        result.push(v.getId());
        });
    
        return result.join('');
        }
    
        function getNodeStateString(treeNode) {
        return treeNode.isLeaf() ?
        'leaf'
        : (treeNode.isExpanded() ? 'expanded' : 'collapsed');
        }
    
        function handleNodeToggle(nodeData, event, isTreeNodeLevel) {
        var treeNode = RichFaces.component(event.target);
        RichFaces.log.info('Toggle event ' + (isTreeNodeLevel ? '(treeNode level)' : '')
        + '[' + nodeData + ']:\n ' + treeNode.getId() + ' became ' + getNodeStateString(treeNode));
        }
    
        function handleBeforeNodeToggle(event, isTreeNodeLevel) {
        var treeNode = RichFaces.component(event.target);
        return confirm('Tree' + (isTreeNodeLevel ? ' node ' : ' ') + 'asks: really toggle node ' + treeNode.getId() + '?');
        }
    
        function handleBeforeNodeSelect(event) {
        var treeNode = RichFaces.component(event.target);
    
        var oldSelectionString = nodesArrayToString(event.rf.data.oldSelection);
        var newSelectionString = nodesArrayToString(event.rf.data.newSelection);
    
        return confirm('Selection will be changed from: [' + oldSelectionString + '] to: [' + newSelectionString + ']');
        }
    
        function handleNodeSelect(event) {
        var treeNode = RichFaces.component(event.target);
    
        var oldSelectionString = nodesArrayToString(event.rf.data.oldSelection);
        var newSelectionString = nodesArrayToString(event.rf.data.newSelection);
    
        RichFaces.log.info('Selection changed from: [' + oldSelectionString + '] to: [' + newSelectionString + ']');
        }
    </h:outputScript>

    <h:messages id="messages" />

    <h:form>
    Toggle mode:
    <h:selectOneRadio value="#{treeBean.toggleType}" onclick="submit()">
            <f:selectItems value="#{treeBean.types}" var="item" itemValue="#{item}" />
        </h:selectOneRadio>

    Selection mode:
    <h:selectOneRadio value="#{treeBean.selectionType}" onclick="submit()">
            <f:selectItems value="#{treeBean.types}" itemDisabled="#{item == 'server'}" var="item" itemValue="#{item}" />
        </h:selectOneRadio>

    Show custom classes:
    <h:selectBooleanCheckbox value="#{treeBean.showCustomClasses}" onclick="submit()" />

        <br />
    Toggle node event:
    <h:selectOneMenu value="#{treeBean.toggleNodeEvent}" onchange="submit()">
            <f:selectItem itemLabel="none" itemValue="" />
            <f:selectItem itemLabel="click" itemValue="click" />
            <f:selectItem itemLabel="mouseenter" itemValue="mouseenter" />
            <f:selectItem itemLabel="dblclick" itemValue="dblclick" />
        </h:selectOneMenu>
    </h:form>

    <h:form id="form">

    <hr />

    Base tree:
        <rich:tree id="tree" nodeType="#{node.parent == null ? 'rootNode': 'childNode'}" var="node"
                 value="#{treeBean.rootNodes}"
                 selectionType="#{treeBean.selectionType}" toggleType="#{treeBean.toggleType}"
                 selection="#{treeBean.selection}">

            <rich:treeToggleListener listener="#{treeBean.toggleActionListenerImpl.processToggleAction}"/>
            <rich:treeSelectionChangeListener binding="#{treeBean.selectionChangeActionListener}"
                                            type="org.richfaces.demo.SelectionChangeActionListenerImpl"/>

            <rich:treeNode type="rootNode">
                <h:panelGroup id="rootNodeGroup" styleClass="rootNode">
                    Root node: #{node.data} -
                    <h:commandLink value="link" action="#{treeBean.clickNode}">
                        <f:ajax render=":messages"/>
                    </h:commandLink>
                </h:panelGroup>
            </rich:treeNode>
            <rich:treeNode type="childNode">
                <h:panelGroup id="childNodeGroup">
                    #{node.data} -
                    <h:commandLink value="link" action="#{treeBean.clickNode}">
                        <f:ajax render=":messages"/>
                    </h:commandLink>
                </h:panelGroup>
            </rich:treeNode>
        </rich:tree>

        <h:commandLink value="Re-render">
            <f:ajax render=":form:tree" execute="@all"/>
        </h:commandLink>

        <hr />

        Base tree w/ filtered contextMenu:
        <rich:tree id="treeContextMenu" nodeType="#{node.parent == null ? 'rootNode': 'childNode'}" var="node"
                 value="#{treeBean.rootNodes}"
                 selectionType="#{treeBean.selectionType}" toggleType="#{treeBean.toggleType}"
                 selection="#{treeBean.selection}">

            <rich:treeToggleListener listener="#{treeBean.toggleActionListenerImpl.processToggleAction}"/>
            <rich:treeSelectionChangeListener binding="#{treeBean.selectionChangeActionListener}"
                                            type="org.richfaces.demo.SelectionChangeActionListenerImpl"/>

            <rich:treeNode type="rootNode">
                <h:panelGroup id="rootNodeGroup" styleClass="rootNode">
                    Root node: #{node.data} -
                    <h:commandLink value="link" action="#{treeBean.clickNode}">
                        <f:ajax render=":messages"/>
                    </h:commandLink>
                </h:panelGroup>
            </rich:treeNode>
            <rich:treeNode type="childNode">
                <h:panelGroup id="childNodeGroup">
                    #{node.data} -
                    <h:commandLink value="link" action="#{treeBean.clickNode}">
                        <f:ajax render=":messages"/>
                    </h:commandLink>
                </h:panelGroup>
            </rich:treeNode>
            <f:ajax render=":form:contextMenu" event="nodetoggle"/>
        </rich:tree>

        <rich:contextMenu id="contextMenu" target="form:treeContextMenu" mode="ajax" targetSelector=".rootNode">
            <rich:menuItem label="View" render="popupContent" oncomplete="alert('view')" mode="ajax"/>
        </rich:contextMenu>

        <h:commandLink value="Re-render">
            <f:ajax render=":form:treeContextMenu" execute="@all"/>
        </h:commandLink>

        <hr />

        org.richfaces.model.TreeNode support:
        <rich:tree id="treeNodeSupport" value="#{treeBean.classicTreeNode}" var="node"
                 selectionType="#{treeBean.selectionType}"
                 toggleType="#{treeBean.toggleType}" rowKeyConverter="#{treeBean.integerSequenceKeyConveter}">
            <rich:treeNode>
                #{node.data} -
                <h:commandLink value="link" action="#{treeBean.clickNode}">
                    <f:ajax render=":messages"/>
                </h:commandLink>
            </rich:treeNode>
        </rich:tree>

        <hr />

        org.richfaces.model.TreeDataModel support:
        <rich:tree id="treeDataModelSupport" value="#{treeBean.treeDataModel}" var="node"
                 selectionType="#{treeBean.selectionType}"
                 toggleType="#{treeBean.toggleType}" rowKeyConverter="#{treeBean.integerSequenceKeyConveter}">
            <rich:treeNode>
                #{node.data} -
                <h:commandLink value="link" action="#{treeBean.clickNode}">
                    <f:ajax render=":messages"/>
                </h:commandLink>
            </rich:treeNode>
        </rich:tree>

        <hr />

        Tree with customized look:
        <rich:tree id="customizedTree" var="node" value="#{treeBean.rootNodes}" selectionType="#{treeBean.selectionType}"
                 toggleType="#{treeBean.toggleType}" styleClass="#{treeBean.showCustomClasses ? 'customClass' : ''}"
                 nodeClass="customNodeClassFromTree" handleClass="customHandleClassFromTree"
                 iconClass="customIconClassFromTree"
                 labelClass="customLabelClassFromTree">

            <rich:treeNode iconLeaf="/images/leaf.png" iconExpanded="/images/minus.png" iconCollapsed="/images/plus.png"
                         styleClass="customNodeClass" handleClass="customHandleClass" iconClass="customIconClass"
                         labelClass="customLabelClass">
                #{node.data}
            </rich:treeNode>
        </rich:tree>

        <hr />

        Tree with default node:
        <rich:tree id="defaultNodeTree" var="node" value="#{treeBean.rootNodes}" selectionType="#{treeBean.selectionType}"
                 toggleType="#{treeBean.toggleType}">
        </rich:tree>

        <hr />

        Tree with client-side event handlers:
        <rich:tree id="clientSideEventsTree" var="node" value="#{treeBean.rootNodes}"
                 selectionType="#{treeBean.selectionType}"
                 toggleType="#{treeBean.toggleType}" onnodetoggle="handleNodeToggle(&quot;#{node.data}&quot;, event, false)"
                 onselectionchange="handleNodeSelect(event)" onbeforeselectionchange="return handleBeforeNodeSelect(event)"
                 onbeforenodetoggle="return handleBeforeNodeToggle(event, false)">

            <rich:treeNode ontoggle="handleNodeToggle(&quot;#{node.data}&quot;, event, true)"
                         onbeforetoggle="return handleBeforeNodeToggle(event, true)">
                #{node.data}
            </rich:treeNode>
        </rich:tree>

        <hr />

        Tree with attached behaviors:
        <h:messages id="treeBehaviorsMessages" for="behaviorsAttachedTree"/>
        <h:messages id="treeNodeBehaviorsMessages" globalOnly="true"/>

        <rich:tree id="behaviorsAttachedTree" var="node" value="#{treeBean.rootNodes}"
                 selectionType="#{treeBean.selectionType}"
                 toggleType="#{treeBean.toggleType}">

            <f:ajax event="nodetoggle" listener="#{treeBean.behaviorToggleListener}" render=":form:treeBehaviorsMessages"/>
            <f:ajax event="selectionchange" listener="#{treeBean.behaviorSelectionChangeListener}"
                    render=":form:treeBehaviorsMessages :form:treeNodeBehaviorsMessages"/>

            <rich:treeNode>
                #{node.data}

                <f:ajax event="toggle" listener="#{treeBean.behaviorToggleListener}"
                        render=":form:treeNodeBehaviorsMessages"/>
            </rich:treeNode>
        </rich:tree>

        <hr />

        Lazy loaded tree:
        <rich:tree id="lazyLoadedTree" var="node" value="#{treeBean.lazyRootNodes}" selectionType="#{treeBean.selectionType}"
                 toggleType="#{treeBean.toggleType}">

            <rich:treeNode>
                #{node.wrappedNode.data}
            </rich:treeNode>
        </rich:tree>

        <a4j:outputPanel ajaxRendered="true">
            <h:messages for="serverListenersTree"/>
        </a4j:outputPanel>

        <hr />

        Server listeners test:
        <rich:tree id="serverListenersTree" var="node" value="#{treeBean.rootNodes}" selectionType="#{treeBean.selectionType}"
                 toggleType="#{treeBean.toggleType}" selectionChangeListener="#{treeBean.processSelectionChange}"
                 toggleListener="#{treeBean.processToggle}">

            <rich:treeSelectionChangeListener type="org.richfaces.demo.TreeBean$SelectionChangeHandler"/>
            <rich:treeToggleListener type="org.richfaces.demo.TreeBean$ToggleHandler"/>

            <rich:treeNode toggleListener="#{treeBean.processToggle}">
                <rich:treeToggleListener type="org.richfaces.demo.TreeBean$ToggleHandler"/>

                #{node.data}
            </rich:treeNode>
        </rich:tree>

        <hr />

        Toggle node event:
        <rich:tree toggleNodeEvent="#{treeBean.toggleNodeEvent}" var="node" value="#{treeBean.rootNodes}"
                 selectionType="#{treeBean.selectionType}" toggleType="#{treeBean.toggleType}">
            <rich:treeNode>
                #{node.data}
            </rich:treeNode>
        </rich:tree>

        <hr />

        execute/render:
        <h:panelGrid columns="2" id="executeRenderTreeGrid">
            <rich:tree var="node" value="#{treeBean.rootNodes}" execute="executeRenderTreeGrid" render="selectionIndicator"
                     selection="#{treeBean.selection}" selectionType="#{treeBean.selectionType}"
                     toggleType="#{treeBean.toggleType}">
                <rich:treeNode>
                    #{node.data}
                </rich:treeNode>
            </rich:tree>

            <h:panelGroup layout="block" id="selectionIndicator" style="margin-left: 50px;">
                Current time: #{treeBean.currentTimeAsString}

                <br/>

                Current selection: #{treeBean.selection}

                <br/>

                Test text:
                <h:inputText value="#{treeBean.executeTestText}"/>

                <br/>

                <a4j:outputPanel ajaxRendered="true">
                    Current time: #{treeBean.currentTimeAsString}
                    <br/>
                    <h:outputText value="#{treeBean.executeTestText}"/>
                </a4j:outputPanel>

            </h:panelGroup>
        </h:panelGrid>

        <hr />

        'handleLoading' facet:
        <rich:tree value="#{treeBean.rootNodes}" toggleType="ajax" var="node">
            <rich:treeNode>
                <f:facet name="handleLoading">
                    <h:graphicImage value="/images/loading.gif"/>
                </f:facet>

                #{node}
            </rich:treeNode>
        </rich:tree>

        <hr />

        'handleLoading' without facet:
        <rich:tree value="#{treeBean.rootNodes}" toggleType="ajax" var="node" styleClass="loadingWithoutFacet"/>

        <a4j:queue/>

        <a4j:log/>
        
        </h:form>
    

    </ui:define>
</ui:composition>
